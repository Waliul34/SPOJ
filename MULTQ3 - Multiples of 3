#include <bits/stdc++.h>
using namespace std;

#define mx 100005

class nd
{
public:
    int updt;
    int cnt[3];
    nd()
    {
        updt = cnt[0] = cnt[1] = cnt[2] = 0;
    }
};
nd tree[mx*3];

void init(int node, int b, int e)
{
    if(b == e)
    {
        tree[node].cnt[0] = 1;
        return;
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e) / 2;
    init(left, b, mid);
    init(right, mid + 1, e);
    tree[node].cnt[0] = tree[left].cnt[0] + tree[right].cnt[0];
}

int query(int node, int b, int e, int i, int j)
{
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e) / 2;
    int update = tree[node].updt;
    if(update != 0)
    {
        int d = tree[node].updt % 3;
        if(d == 1)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i0, tree[node].cnt[2] = i1, tree[node].cnt[0] = i2;

        }
        else if(d == 2)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i2, tree[node].cnt[2] = i0, tree[node].cnt[0] = i1;
        }
        if(b != e)
        {
            tree[left].updt += tree[node].updt;
            tree[right].updt += tree[node].updt;
        }
        tree[node].updt = 0;
    }
    if(i > e || j < b)
        return 0;
    if(b >= i && e <= j)
    {
        int d = tree[node].updt % 3;
        if(d == 1)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i0, tree[node].cnt[2] = i1, tree[node].cnt[0] = i2;

        }
        else if(d == 2)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i2, tree[node].cnt[2] = i0, tree[node].cnt[0] = i1;
        }
        if(b != e)
        {
            tree[left].updt += tree[node].updt;
            tree[right].updt += tree[node].updt;
        }
        tree[node].updt = 0;
        return tree[node].cnt[0];
    }
    int p1 = query(left, b, mid, i, j);
    int p2 = query(right, mid + 1, e, i, j);
    int c0, c1, c2;
    c0 = tree[node].cnt[0] = tree[left].cnt[0] + tree[right].cnt[0];
    c1 = tree[node].cnt[1] = tree[left].cnt[1] + tree[right].cnt[1];
    c2 = tree[node].cnt[2] = tree[left].cnt[2] + tree[right].cnt[2];
    return p1+p2;
}

void update(int node, int b, int e, int i, int j)
{
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e) / 2;
    int updat = tree[node].updt;
    if(updat != 0)
    {
        int d = tree[node].updt % 3;
        if(d == 1)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i0, tree[node].cnt[2] = i1, tree[node].cnt[0] = i2;

        }
        else if(d == 2)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i2, tree[node].cnt[2] = i0, tree[node].cnt[0] = i1;
        }
        if(b != e)
        {
            tree[left].updt += tree[node].updt;
            tree[right].updt += tree[node].updt;
        }
        tree[node].updt = 0;
    }
    if(i > e || j < b)
        return;
    if(b >= i && e <= j)
    {
        tree[node].updt++;
        int d = tree[node].updt % 3;
        if(d == 1)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i0, tree[node].cnt[2] = i1, tree[node].cnt[0] = i2;

        }
        else if(d == 2)
        {
            int i0, i1, i2;
            i0 = tree[node].cnt[0], i1 = tree[node].cnt[1], i2 = tree[node].cnt[2];
            tree[node].cnt[1] = i2, tree[node].cnt[2] = i0, tree[node].cnt[0] = i1;

        }
        if(b != e)
        {
            tree[left].updt += tree[node].updt;
            tree[right].updt += tree[node].updt;
        }
        tree[node].updt = 0;
        return;
    }
    update(left, b, mid, i, j);
    update(right, mid + 1, e, i, j);
    int c0, c1, c2;
    c0 = tree[node].cnt[0] = tree[left].cnt[0] + tree[right].cnt[0];
    c1 = tree[node].cnt[1] = tree[left].cnt[1] + tree[right].cnt[1];
    c2 = tree[node].cnt[2] = tree[left].cnt[2] + tree[right].cnt[2];
    return;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int n, i, j, k, t, kase(1), q;
    cin>>n>>q;
    init(1, 1, n);
    while(q--)
    {
        cin>>t>>i>>j;
        if(t)
            cout<<query(1, 1, n, i+1, j+1)<<"\n";
        else
            update(1, 1, n, i+1, j+1);
    }
    return 0;
}
